This test suite utilizes pytest and gdal to verify that the gdal-subsetter is functioning correctly. It currently runs against the ASF S1 InSAR (GRFN), UAVSAR_POLSAR_PAULI and ALOS_AVNIR_OBS_ORI collections.

Once the code is installed and the authentication file (.netrc) set up, the test suite can be run from the root 'asf_gdal' directory. The call to run the tests should specify the environment (dev, sit, uat, prod) to run against.

For example:
>>>pytest --env uat
or verbose:
>>>pytest -v --env uat

Or, run it with a marker that species specific test(s) to run or not:
>>>pytest --env uat -m "status or subset"
>>>pytest --env uat -m "grfn and variables"
>>>pytest --env uat -m "not subset"

Special case: To run with existing product files (ie., NOT hit harmony to process the files)
>>>pytest --env uat -m "not status"

The following markers allow for specific tests to be run:
status        # The status tests actually query harmony, verify status code is 200 and generate the products for the other tests. Do not skip this test. Need data for the other tests.
avnir         # Tests that run against the AVNIR-2 collection (ALOS_AVNIR_OBS_ORI)
grfn          # Tests that run against the GRFN collection (S1 INSAR)
uavsar        # Tests that run against the UAVSAR_POLSAR_PAULI
existing_data # This test needed to define the outfile in the case when existing files are used (ie., when the marker -m "not status" is used)
cs            # Tests that verify the coordinate system is as expected (Geographic or Projected)
projection    # Tests that verity the projected coordinate system is as expected
gcs           # Tests that verify that the product and expected geographic coordinate system agree
authority     # Checks that the product and expected authority agree
epsg          # Checks that the product and expected epsg codes agree
subset        # Checks that the spatial extent of the product agrees with input subset values
bands         # Checks that the number of bands in the product agrees with input values
variables     # Checks that the bands of the product geotiff contain the correct variables
xy_size       # Checks that the number of pixels (x and y) in product agree with input values

Report:
An html report can be generated by including "--html=report.html" in the test run call.
For example:
>>> pytest --env uat --html=report.html

Authentication:
The harmony_requests.py module requires EDL URS credentials in a .netrc file (For info: https://support.earthdata.nasa.gov/index.php?/Knowledgebase/Article/View/43/21/how-to-access-urs-gated-data-with-curl-and-wget)

Some notes on the local setup:
pip3 install pipenv    #Install it
cd venv
# Installed gdal in venv
sudo apt-get install python3.6-dev
sudo add-apt-repository ppa:ubuntugis/ppa
sudo apt-get update
sudo apt-get install gdal-bin
ogrinfo --version
sudo apt-get install libgdal-dev
export CPLUS_INCLUDE_PATH=/usr/include/gdal
export C_INCLUDE_PATH=/usr/include/gdal
pipenv install GDAL==3.0.4

Some notes and instructions on pipenv:

Okay, so let’s say you’ve got everything working in your local development environment and you’re ready to push it to production. To do that, you need to lock your environment so you can ensure you have the same one in production:

$ pipenv lock
This will create/update your Pipfile.lock, which you’ll never need to (and are never meant to) edit manually. You should always use the generated file.

Now, once you get your code and Pipfile.lock in your production environment, you should install the last successful environment recorded:

$ pipenv install --ignore-pipfile
This tells Pipenv to ignore the Pipfile for installation and use what’s in the Pipfile.lock. Given this Pipfile.lock, Pipenv will create the exact same environment you had when you ran pipenv lock, sub-dependencies and all.

The lock file enables deterministic builds by taking a snapshot of all the versions of packages in an environment (similar to the result of a pip freeze).
